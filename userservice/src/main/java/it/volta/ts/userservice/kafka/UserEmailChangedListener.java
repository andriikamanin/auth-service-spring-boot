package it.volta.ts.userservice.kafka;

import it.volta.ts.userservice.dto.UserEmailChangedEvent;
import it.volta.ts.userservice.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@Slf4j
public class UserEmailChangedListener {

    private final UserService userService;

    @KafkaListener(
            topics = "user.emailChanged",
            groupId = "user-service",
            containerFactory = "userEmailChangedListenerContainerFactory"
    )
    public void handleUserEmailChanged(UserEmailChangedEvent event) {
        log.info("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ user.emailChanged: {}", event);

        try {
            userService.updateEmail(event.getUserId(), event.getNewEmail());
            log.info("‚úÖ Email –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", event.getUserId());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", event.getUserId(), e.getMessage(), e);
        }
    }
}